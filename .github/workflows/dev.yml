# This is a basic workflow to help you get started with Actions

name: Development Workflow

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "dev" branch
  push:
    branches: ["dev"]
  pull_request:
    branches: ["dev"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  WORKSPACE: ${{ github.event_name == 'pull_request' && (github.base_ref == 'main' && 'prod' || github.head_ref) || (github.ref == 'refs/heads/main' && 'prod' || github.ref_name) }}
  WORKING_DIR: "./deployments"
  ARM_CLIENT_ID: ${{secrets.AZURE_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.AZURE_CLIENT_SECRET}}
  ARM_SUBSCRIPTION_ID: ${{secrets.AZURE_SUBSCRIPTION_ID}}
  ARM_TENANT_ID: ${{secrets.AZURE_TENANT_ID}}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  linting:
    if: github.ref == 'refs/heads/dev'
    name: "Linting"
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - uses: terraform-linters/setup-tflint@v4
        name: Setup TFLint
        with:
          tflint_version: v0.53.0

      # Shows tflint version
      - name: Show version
        id: version
        run: tflint --version

      # Runs 'tflint'
      - name: Run tflint
        id: tflint
        run: tflint --recursive --minimum-failure-severity error
  tfsec:
    if: github.ref == 'refs/heads/dev'
    name: tfsec
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          # Excludes all LOW severities.
          additional_args: --minimum-severity MEDIUM
  validate:
    if: github.ref == 'refs/heads/dev'
    name: "Validate"
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      # Runs 'terraform init'
      - name: Terraform init
        working-directory: ${{env.WORKING_DIR}}
        id: init
        run: terraform init

      # Selects the workspace
      - name: Terraform workspace
        working-directory: ${{env.WORKING_DIR}}
        id: select_workspace
        run: terraform workspace new "${{ env.WORKSPACE }}" || terraform workspace select "${{ env.WORKSPACE }}"

      # Runs 'terraform validate'
      - name: Terraform validate
        working-directory: ${{env.WORKING_DIR}}
        id: validate
        run: terraform validate
  plan:
    if: github.ref == 'refs/heads/dev'
    needs: [validate]
    runs-on: ubuntu-22.04
    name: "Terraform Plan"

    steps:
      - uses: actions/checkout@v4

      # Initialize Terraform
      - name: Terraform init
        working-directory: ${{env.WORKING_DIR}}
        id: init
        run: terraform init

        # Selects the workspace
      - name: Terraform workspace
        working-directory: ${{env.WORKING_DIR}}
        id: select_workspace
        run: terraform workspace new "${{ env.WORKSPACE }}" || terraform workspace select "${{ env.WORKSPACE }}"

      # Plans the Terraform project
      - name: Terraform plan
        working-directory: ${{env.WORKING_DIR}}
        id: plan
        run: terraform plan -out="${{env.WORKSPACE}}.tfplan" -var="subscription_id=${{secrets.AZURE_SUBSCRIPTION_ID}}"

      - uses: actions/cache@v3
        id: cache
        with:
          key: "${{env.WORKSPACE}}-${{github.run_id}}-${{github.run_number}}.tfplan"
          path: ${{env.WORKING_DIR}}/${{env.WORKSPACE}}.tfplan

  apply:
    if: github.ref == 'refs/heads/dev'
    needs: [plan]
    runs-on: ubuntu-22.04
    environment: dev

    name: "Terraform Apply"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache/restore@v3
        id: restore
        with:
          key: "${{env.WORKSPACE}}-${{github.run_id}}-${{github.run_number}}.tfplan"
          path: ${{env.WORKING_DIR}}/${{env.WORKSPACE}}.tfplan

      # Initialize Terraform
      - name: Terraform init
        working-directory: ${{env.WORKING_DIR}}
        id: init
        run: terraform init

      # Selects the workspace
      - name: Terraform workspace
        working-directory: ${{env.WORKING_DIR}}
        id: select_workspace
        run: terraform workspace new "${{ env.WORKSPACE }}" || terraform workspace select "${{ env.WORKSPACE }}"

      # Applies the Terraform plan
      - name: Terraform apply
        working-directory: ${{env.WORKING_DIR}}
        id: apply
        run: terraform apply -auto-approve "${{env.WORKSPACE}}.tfplan"
